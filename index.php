<?phprequire "sys/generator.php";require "sys/uiconstants.php";// Contains the data about the player civilizationclass Player {	const Name = "Alonian";	const Sys = "Alon";}?><html>   <head>      <title>Testing</title>      <link rel="stylesheet" type="text/css" href="css/dastyle.css" />      <script src="js/lib/jquery-1.8.3.min.js"></script>      <script src="js/core.js"></script>      <script src="js/world.js"></script>      <script src="js/ui.js"></script>      <script>        // Conains the game        var game = new function() {            <?php defCreateUniverse(Player::Name, Player::Sys); ?>                        // Create the universe and the players            var uni = createUniverse([{name: '<?php echo Player::Name; ?>', type: 'Empire'},                                      {name: 'Marak', type: 'Federation'},                                      {name: 'Jaidia', type: 'Imperium'},                                      {name: 'Tzakakal', type: 'Commonwealth'},                                      {name: 'Quidil', type: 'Protectorate'},                                      {name: 'Borrog', type: 'Hive'}]);            var player = uni.civs.get('<?php echo Player::Name; ?>');                        var starmap = new ui.Starmap(uni, player.home);            var systemView = new ui.SystemView(uni, starmap.selected);            var selships = new core.Hashtable();            var activeUI = starmap;            var turn = 0;                        // Selects or deselects ships            function selectShip(id) {                // Updates the range display                function updateRange() {                    var smallestRange = selships.findBest(world.ShipUtils.shortestRange);                    starmap.selectRange(smallestRange.range);                }                                // Get the ship and make sure its owned by the player                var ship = starmap.selected().ships.get(id);                if (ship.owner === player) {                    // Select it if it wasnt selected, or deselect it if it was                    var uiship = $('#' + ui.shipId(id));                    if (uiship.hasClass('activeShip') == true) {                        uiship.removeClass('activeShip');                        selships.remove(id);                        if (!selships.isEmpty()) {                            updateRange();                        }                        else {                            starmap.deselectRange();                        }                    }                    else {                        uiship.addClass('activeShip');                        selships.set(id, ship);                        updateRange();                    }                    starmap.display(player, canvas());                }            }                        // Highlights a system            function highlightSys(e) {                var c = canvas();                var mp = ui.getMousePos(c, e);                if (starmap.highlight(c, mp.x, mp.y)) {                    starmap.display(player, c);                }            }                        // Selects a system            function selectSys(){                var sys = starmap.highlighted();                if (sys !== null) {                    // Check if there are selected ships                    if (!selships.isEmpty()) {                        // If there are selected ships, create a fleet and check if the highlighted system is in range                        var fleet = new world.Fleet(uni.deepspace, player, starmap.selected(), selships);                        if (fleet.mark(sys)) {                            // If the highlighted system was in range, ask to send the ships, and if they where sent select the system                            if (confirm('Send the ships?')) {                                fleet.send();                                doSelectSys(sys);                            }                        }                        else {                            alert('Too far away');                        }                    }                    else {                        // If no ships where selected, just select the system                        updateSystemBtn(sys);                        doSelectSys(sys);                    }                }            }                        // Performs the actual selection            function doSelectSys(sys) {                // Clear the ship selection                if (!selships.isEmpty()) {                    selships.clear();                }                                // Select the system and redraw the starmap                starmap.select(player, sys);                starmap.display(player, canvas());            }            // Displays the starmap            function displayStarmap() {                $('#<?php echo UIStatic::SystemView; ?>').hide();                $('#<?php echo UIStatic::StarmapView; ?>').show();                starmap.display(player, canvas());                activeUI = starmap;            }            // Displays a system            function displaySystem() {                if (player.visited(starmap.selected())) {                    $('#<?php echo UIStatic::StarmapView; ?>').hide();                    var view = $('#<?php echo UIStatic::SystemView; ?>').show();                    systemView.display(player, view);                    activeUI = systemView;                }                else {                    alert('Cannot enter a system that has not yet been visited');                }            }                        // Shows the ship data            function showShipData(uid) {                var ship = starmap.selected().ships.get(uid);                $("#hudShipType").html(ship.type);                $("#hudShipHull").html(ship.health + " / " + ship.maxHealth);                $("#hudShipRange").html(ship.range);                $("#hudShipDamage").html(ship.damage === 0 ? "N/A" : ship.damage);                $("#hudShipOwner").html(ship.owner.civName + " " + ship.owner.type);                $("#hud").show();            }                        // Update the turn button to display the proper turn number            function updateTurnButton() {                ++turn;                $('#<?php echo UIStatic::EndTurn; ?>').html('End turn ' + turn);            }                        // Used to show the button for showing a system if the system has been visited            function updateSystemBtn(sys) {                var sysbtn = $('#<?php echo UIStatic::System; ?>');                if (!player.visited(sys)) {                    sysbtn.attr('disabled', 'disabled');                }                else if (sysbtn.attr('disabled')) {                    sysbtn.removeAttr('disabled');                }            }                        // Returns the canvas            function canvas() {                return document.getElementById('<?php echo UIStatic::StarmapView; ?>');            }            // Updates the UI            function updateUI() {                $('#<?php echo UIStatic::MoneyInfo; ?>').html(player.money);                ui.updateShipBar(player, $('#<?php echo UIStatic::BottomDisp; ?>'), starmap.selected(), selectShip, showShipData);            }                        // Ends the turn            function endTurn() {                uni.update();                var parent = activeUI === starmap ? canvas() : $('#<?php echo UIStatic::SystemView; ?>');                activeUI.display(player, parent);                ui.updateShipBar(player, $('#<?php echo UIStatic::BottomDisp; ?>'), starmap.selected(), selectShip, showShipData);                updateTurnButton();            }                        // Init the game            this.init = function() {                starmap.display(player, canvas());                updateUI();                            // Add the event handlers to the starmap                var starmapId = '#<?php echo UIStatic::StarmapView; ?>';                $(starmapId).mousemove(highlightSys);                $(starmapId).click(selectSys);                $(starmapId).dblclick(function() {                    if (starmap.highlighted() === starmap.selected()) {                        displaySystem();                    }                });                starmap.selectionChanged = function(sys) {                    ui.updateShipBar(player, $('#<?php echo UIStatic::BottomDisp; ?>'), sys, selectShip, showShipData);                };                                updateTurnButton();                $('#<?php echo UIStatic::CivInfo; ?>').html(player.civName + ' ' + player.type);                                // Hide the system view                $('#<?php echo UIStatic::SystemView; ?>').hide();                                // Add event handlers                $('#<?php echo UIStatic::Starmap; ?>').click(displayStarmap);                $('#<?php echo UIStatic::System; ?>').click(displaySystem);                $('#<?php echo UIStatic::ShowGrid; ?>').click(function() {                    starmap.toggleGrid();                    starmap.display(player, canvas());                });                                // These features are not implemented and you know it (now) :P                function notImplemented() {                    alert('Not implemented yet');                }                $('#<?php echo UIStatic::Diplomacy; ?>').click(notImplemented);                $('#<?php echo UIStatic::Colonies; ?>').click(notImplemented);                $('#<?php echo UIStatic::Ships; ?>').click(notImplemented);                $('#<?php echo UIStatic::Research; ?>').click(notImplemented);                $('#<?php echo UIStatic::EndTurn; ?>').click(endTurn);                               // Close HUD                 $(".close").click(function(e) {                    $("#hud").hide();                });            };        };                // Setups the game        $(game.init);            </script>   </head>   <body>        <!-- The HUD -->        <div id="hud">            <div id="info_central">                <div class="close">X</div>                <p id="hudShipType"></p>                <div>Hull: <span id="hudShipHull"></span></div>                <div>Range: <span id="hudShipRange"></span></div>                <div>Damage: <span id="hudShipDamage"></span></div>                <div>Owner: <span id="hudShipOwner"></span></div>            </div>        </div>                <!-- Top data and button bar thing -->        <div class="header">            <span id="<?php echo UIStatic::CivInfo; ?>"></span> -             <span id="<?php echo UIStatic::MoneyInfo; ?>"></span> bc -             <button id="<?php echo UIStatic::Starmap; ?>" type="button">Galaxy</button>             <button id="<?php echo UIStatic::System; ?>" type="button">System</button>             <button id="<?php echo UIStatic::Diplomacy; ?>" type="button">Diplomacy</button>             <button id="<?php echo UIStatic::Colonies; ?>" type="button">Colonies</button>             <button id="<?php echo UIStatic::Ships; ?>" type="button">Ships</button>             <button id="<?php echo UIStatic::Research; ?>" type="button">Research</button>             ---             <button id="<?php echo UIStatic::ShowGrid; ?>" type="button">Toggle grid</button>        </div>        <!-- The content -->        <div class="content">            <div id="<?php echo UIStatic::SystemView; ?>">            </div>            <canvas id="<?php echo UIStatic::StarmapView; ?>" class="starmap">            </canvas>        </div>         <!-- The bottom menu bar thing -->        <div id="footer" class="footer">           <div id="<?php echo UIStatic::BottomDisp; ?>"></div>           <!-- The end turn button -->           <button id="<?php echo UIStatic::EndTurn; ?>" class="endturn" type="button">End turn</button>        </div>   </body></html>